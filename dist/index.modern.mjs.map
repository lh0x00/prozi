{"version":3,"file":"index.modern.mjs","sources":["../src/utilities/fastObjectProperties.ts","../src/Quiz.ts"],"sourcesContent":["import create from 'to-fast-properties'\n\nfunction fastObjectProperties<T extends object>(data?: T): T {\n  return create<T>(data)\n}\n\nexport default fastObjectProperties\n","/* eslint-disable @typescript-eslint/return-await */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n\nimport fastObjectProperties from './utilities/fastObjectProperties'\nimport throat from './utilities/throat'\nimport {\n  type PromiseType, \n} from './types'\n\ninterface QuizThroatOptions {\n  concurrency: number\n  schedule: boolean\n}\n\ninterface QuizDeferPromise<T extends any> {\n  cancel: EnhancedPromise<T>['cancel']\n  flush: () => any\n  is: {\n    finalled: () => boolean\n    rejected: () => boolean\n    resolved: () => boolean\n  }\n  promise: EnhancedPromise<T>\n  reject: (reason?: any) => any\n  resolve: (value: T | PromiseLike<T>) => any\n  state: 'pending' | 'rejected' | 'resolved'\n}\n\ninterface QuizDeferifyPromise<T extends any, F = any>\n  extends QuizDeferPromise<T> {\n  forward: F\n}\n\ntype QuizPromiseExecuter<T extends any> = (\n  resolve: (value: T | PromiseLike<T>) => any,\n  reject: (reason?: any) => any,\n) => any\n\ntype QuizQueueItem = () => Promise<any>\n\ninterface QuizPromiseOptions {\n  cancelable?: boolean\n  timeout?: number\n}\n\ninterface EnhancedPromise<T extends any> extends Promise<T> {\n  cancel: () => any\n}\n\n//\ntype QuizCallbackError = Error | string | null | any | undefined\ntype QuizFunctionCallback<R> = (error: QuizCallbackError, results: R) => any\ntype QuizFunctionWithCallback<T extends any[], R> = (\n  ...args: [...T, QuizFunctionCallback<R>]\n) => any\n\nclass Quiz {\n  static readonly defaults = fastObjectProperties({\n    concurrency: 4,\n  })\n\n  static wrap<T extends any[], U>(\n    run: (...args: T) => U | PromiseLike<U>,\n  ): (...args: T) => Promise<U> {\n    return async function (this: any, ...rest: T) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const context = this\n\n      return Quiz.create(async (resolve, reject) => {\n        try {\n          resolve(Promise.resolve(run.apply(context, rest)))\n        } catch (error) {\n          reject(error)\n        }\n      })\n    }\n  }\n\n  static async immediate<T extends any>(\n    task?: () => T | PromiseLike<T>,\n  ): Promise<T> {\n    return Quiz.create((resolve, reject) => {\n      Promise.resolve().then(() => {\n        Promise.resolve((typeof task === 'function' ? task() : null) as any)\n          .then(resolve)\n          .catch(reject)\n      })\n    })\n  }\n\n  static async timeout<T extends any>(\n    task?: () => T | PromiseLike<T>,\n    delay = 0,\n  ): Promise<T> {\n    return Quiz.create((resolve, reject) => {\n      setTimeout(() => {\n        Promise.resolve((typeof task === 'function' ? task() : null) as any)\n          .then(resolve)\n          .catch(reject)\n      }, delay)\n    })\n  }\n\n  static async throat<I extends any, R extends any>(\n    list: I[],\n    task: (item: I, idx?: number) => Promise<R>,\n    options?: Partial<QuizThroatOptions>,\n  ): Promise<R[]> {\n    if (!list || !Array.isArray(list) || !('map' in list)) {\n      throw new Error(\n        'The parameter list received is invalid,' +\n          \"it's must be a list or support `map` prototype.\",\n      )\n    }\n\n    const opts = Object.assign(\n      {\n        concurrency: this.defaults.concurrency,\n        schedule: false,\n      },\n      options,\n    )\n\n    if (opts.concurrency <= 0) {\n      throw new Error('Quiz throat required concurrency value is greater 0.')\n    }\n\n    return Quiz.map(list, task, opts)\n  }\n\n  static async map<I extends any, R extends any>(\n    list: I[],\n    task: (item: I, idx?: number) => Promise<R>,\n    options?: Partial<QuizThroatOptions>,\n  ): Promise<R[]> {\n    if (!list || !Array.isArray(list) || !('map' in list)) {\n      throw new Error(\n        'The parameter list received is invalid,' +\n          \"it's must be a list or support `map` prototype.\",\n      )\n    }\n\n    const opts = Object.assign(\n      {\n        concurrency: -1,\n        schedule: false,\n      },\n      options,\n    )\n\n    return Quiz.all(\n      list.map(opts.concurrency > 0 ? throat(opts.concurrency, task) : task),\n    )\n  }\n\n  static async from<T extends Record<string, Promise<any>>>(\n    promises: T,\n  ): Promise<{\n    [K in keyof T]: PromiseType<T[K]>\n  }> {\n    const keys = Object.keys(promises)\n    const values = Object.values(promises)\n    const recevied: any[] = await this.all(values)\n\n    const results = recevied.reduce(\n      (acc, item, idx) =>\n        Object.assign(acc, {\n          [keys[idx]]: item,\n        }),\n      fastObjectProperties(),\n    )\n\n    return results\n  }\n\n  static async all<I extends any>(\n    ...rest: Array<Promise<I> | Array<Promise<I>>>\n  ): Promise<I[]> {\n    const promises: Array<Promise<any>> = rest.reduce<any>(\n      (acc, item) => acc.concat(item),\n      [],\n    )\n\n    return Promise.all(promises)\n  }\n\n  static readonly race = async <I extends any>(\n    ...rest: Array<Promise<I> | Array<Promise<I>>>\n  ): Promise<I> => {\n    const promises: Array<Promise<any>> = rest.reduce<any>(\n      (acc, item) => acc.concat(item),\n      [],\n    )\n\n    return Promise.race(promises)\n  }\n\n  static defer<T extends any>(\n    options?: QuizPromiseOptions,\n  ): QuizDeferPromise<T> {\n    const opts = Object.assign(\n      {\n        timeout: -1,\n        cancelable: true,\n      },\n      options,\n    )\n\n    const defered = fastObjectProperties({}) as QuizDeferPromise<T>\n\n    defered.state = 'pending'\n    defered.is = fastObjectProperties({\n      finalled: () =>\n        defered.state === 'resolved' || defered.state === 'rejected',\n      resolved: () => defered.state === 'resolved',\n      rejected: () => defered.state === 'rejected',\n    })\n\n    // @ts-expect-error\n    defered.promise = new Promise((resolve, reject) => {\n      defered.resolve = resolve\n      defered.reject = reject\n\n      if (opts.cancelable) {\n        Promise.resolve().then(() => {\n          defered.cancel = defered.promise.cancel = function () {\n            const error = new Error('The promise have been canceled.')\n            error.name = 'PromiseCanceled'\n\n            defered.reject(error)\n          }\n        })\n      }\n\n      if (opts.timeout > 0) {\n        let timer = setTimeout(() => {\n          timer = -1 as any\n\n          const error = new Error('The promise has been timedout.')\n          error.name = 'PromiseTimedout'\n\n          defered.reject(error)\n        }, opts.timeout)\n\n        defered.flush = function () {\n          clearTimeout(timer)\n\n          timer = -1 as any\n        }\n\n        defered.promise.finally(() => {\n          defered.flush()\n        })\n      }\n    })\n\n    //\n    defered.promise\n      .then(() => (defered.state = 'resolved'))\n      .catch(() => (defered.state = 'rejected'))\n\n    return defered\n  }\n\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  static run<T extends any>(\n    task: () => Promise<T>,\n    options?: QuizPromiseOptions,\n  ): EnhancedPromise<T> {\n    const defered = Quiz.defer<T>(options)\n\n    task().then(defered.resolve).catch(defered.reject)\n\n    return defered.promise\n  }\n\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  static create<T extends unknown>(\n    task: QuizPromiseExecuter<T>,\n    options?: QuizPromiseOptions,\n  ): EnhancedPromise<T> {\n    const defered = Quiz.defer<T>(options)\n\n    task(defered.resolve, defered.reject)\n\n    return defered.promise\n  }\n\n  static promisify =\n    <I extends any[], R>(wrapped: QuizFunctionWithCallback<I, R>) =>\n    async (...args: I): Promise<R> =>\n      new Promise((resolve, reject) => {\n        wrapped(...args, (error: QuizCallbackError, results: R) => {\n          error ? reject(error) : resolve(results)\n        })\n      })\n\n  static deferify =\n    <I extends any[], R, F = any>(wrapped: QuizFunctionWithCallback<I, R>) =>\n    (...args: I): QuizDeferifyPromise<R, F> => {\n      const defer = Quiz.defer<R>()\n\n      // @ts-expect-error\n      defer.forward = wrapped(...args, (error: QuizCallbackError, results: R) =>\n        error ? defer.reject(error) : defer.resolve(results))\n\n      return defer as any\n    }\n}\n\nexport type {\n  EnhancedPromise,\n  QuizCallbackError,\n  QuizDeferifyPromise,\n  QuizDeferPromise,\n  QuizFunctionCallback,\n  QuizFunctionWithCallback,\n  QuizPromiseExecuter,\n  QuizPromiseOptions,\n  QuizQueueItem,\n  QuizThroatOptions,\n}\n\nexport default Quiz\n"],"names":["fastObjectProperties","data","create","Quiz","static","run","async","rest","context","this","resolve","reject","Promise","apply","error","task","then","catch","delay","setTimeout","list","options","Array","isArray","Error","opts","Object","assign","concurrency","defaults","schedule","map","all","throat","promises","keys","values","reduce","acc","item","idx","concat","timeout","cancelable","defered","state","is","finalled","resolved","rejected","promise","cancel","name","timer","flush","clearTimeout","finally","defer","race","promisify","wrapped","args","results","deferify","forward"],"mappings":"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"}